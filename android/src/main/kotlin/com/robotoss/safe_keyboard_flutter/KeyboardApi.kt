// Autogenerated from Pigeon (v24.2.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.robotoss.safe_keyboard_flutter

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Enumeration of possible keyboard actions */
enum class ActionType(val raw: Int) {
  INSERT(0),
  SPACE(1),
  BACKSPACE(2),
  ENTER(3);

  companion object {
    fun ofRaw(raw: Int): ActionType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class KeyboardInput (
  val fieldId: Long,
  val inputBytes: List<Long>? = null,
  val action: ActionType
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): KeyboardInput {
      val fieldId = pigeonVar_list[0] as Long
      val inputBytes = pigeonVar_list[1] as List<Long>?
      val action = pigeonVar_list[2] as ActionType
      return KeyboardInput(fieldId, inputBytes, action)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      fieldId,
      inputBytes,
      action,
    )
  }
}
private open class KeyboardApiPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ActionType.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          KeyboardInput.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is ActionType -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is KeyboardInput -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface KeyboardHostApi {
  /**
   * Sets the localCount on Android side.
   * If count == 0, clear the field.
   * Otherwise, insert one random placeholder if the field is empty.
   */
  fun showKeyboard(fieldId: Long, currentCount: Long)
  fun hideKeyboard()

  companion object {
    /** The codec used by KeyboardHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      KeyboardApiPigeonCodec()
    }
    /** Sets up an instance of `KeyboardHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: KeyboardHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.safe_keyboard_flutter.KeyboardHostApi.showKeyboard$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val fieldIdArg = args[0] as Long
            val currentCountArg = args[1] as Long
            val wrapped: List<Any?> = try {
              api.showKeyboard(fieldIdArg, currentCountArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.safe_keyboard_flutter.KeyboardHostApi.hideKeyboard$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.hideKeyboard()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class KeyboardFlutterApi(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by KeyboardFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      KeyboardApiPigeonCodec()
    }
  }
  /** Called by Android when user input is detected */
  fun onInput(inputArg: KeyboardInput, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.safe_keyboard_flutter.KeyboardFlutterApi.onInput$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(inputArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
